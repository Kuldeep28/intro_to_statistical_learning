x=rnorm()
y=rnorm()
x=rnorm(100)
y=rnorm(100)
plot(x,y,xlab ="independent variable",ylab = "dependent varable")
plot(x,y,xlab = "independent_var",ylab = "dependent_var")
library("ggplot2", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("cluster", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("mongolite", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("mgcv", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("kernlab", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("KernSmooth", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("jsonlite", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("hexbin", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("grid", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("gower", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("glue", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("spatial", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("splines", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("sparklyr", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
null deviance(1)
null deviance(1)
null deviance(1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
null deviance(1)
null deviance(1)
null deviance(1)
null deviance(1)
plot(x,y)
install.packages("devtools")
library(devtools)
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bit", "blob", "broom", "caret", "cluster", "config", "curl", "data.table", "DBI", "dbplyr", "ddalpha", "digest", "dplyr", "DRR", "forcats", "foreach", "foreign", "glmnet", "glue", "haven", "hexbin", "hms", "htmlwidgets", "httpuv", "IRdisplay", "iterators", "kernlab", "knitr", "lava", "lazyeval", "lubridate", "maps", "MASS", "Matrix", "mgcv", "miniUI", "modelr", "mongolite", "nlme", "odbc", "openssl", "packrat", "pbdZMQ", "plogr", "prodlim", "profvis", "pryr", "psych", "purrr", "quantmod", "randomForest", "Rcpp", "RCurl", "readxl", "recipes", "repr", "reshape2", "RJDBC", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "rsconnect", "selectr", "sfsmisc", "shiny", "sourcetools", "sparklyr", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "TTR", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
detach("package:utils", unload=TRUE)
library("utils", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("tools", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
install.packages("devtools")
library("abind", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
detach("package:abind", unload=TRUE)
library("abind", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("assertthat", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("backports", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("base64enc", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("SQUAREM", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("splines", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("sourcetools", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("spatial", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rvest", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rstudioapi", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("scales", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rsconnect", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rprojroot", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rpart", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("robustbase", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rmarkdown", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rlang", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("RJSONIO", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("readr", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rematch", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("repr", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("reshape2", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("Rcpp", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("RColorBrewer", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rbokeh", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("rappdirs", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("randomForest", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("R6", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("quantmod", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("psych", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("pryr", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("proto", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
library("profvis", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
install.packages("devtools")
a=c(1,2,1,2)
a=c[1,2,1,2]
library("cli", lib.loc="/media/kuldeep/seed/anypy/lib/R/library")
a=90
a=a+a
install.packages("ggplot")
# type your code for Question 3 here, and Knit
library(statsr)
library(statsr)
read.csv("/media/kuldeep/seed2/datset_tradingg/real_estate_db.csv")
x=read.csv("/media/kuldeep/seed2/datset_tradingg/real_estate_db.csv")
library(plotly)
library(ggplot2)
ggplot(data=x,mapping = aes(x=pop,y=AWater))
ggplot(data=x,mapping = aes(x=pop,y=AWater))+geom_point()
y=format(x,scientific=FALSE)
ggplot(data=y,mapping = aes(x=pop,y=AWater))+geom_point()
ggplot(data=y,mapping = aes(x=pop,y=AWater))+geom_bar()
ggplot(data=y,mapping = aes(x=pop,color=AWater))+geom_bar()
ggplot(data=y,mapping = aes(x=pop,color=STATEID))+geom_bar()
a=ggplot(data=x,mapping = aes(x=pop,y=AWater))+geom_point()
q=gplotly(a)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("devtools")
install.packages("libssl-dev")
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
install.packages(c("pillar", "utf8"))
library(plotly)
a
a=ggplot(data=x,mapping = aes(x=pop,y=AWater))+geom_polyline()
a=ggplot(data=x,aes(x=pop,y=AWater))+geom_freqplot()
library(ggplot2)
a=ggplot(data=x,aes(x=pop,y=AWater))+geom_freqplot()
library(ggplot2)
library(ggplot2)
library(plotly)
library(dplyr)
library(devtools)
install.packages("devtools")
install.packages("deb")
install.packages("plotly")
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = FALSE
)
summary(cars)
plot(pressure)
kick_data=read.csv("/media/kuldeep/seed2/kicstrter_data/ks-projects-201801.csv")
names(kick_data)
ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
library(ggplot2)
library(dplyr)
ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
kick_data=read.csv("/media/kuldeep/seed2/kicstrter_data/ks-projects-201801.csv")
names(kick_data)
library(plotly)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
ggplotly(a)
a=ggplot(data=kick_data,aes(x=main_category,y=state))+geom_count()+theme()
ggplotly(a)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
kick_data=read.csv("/media/kuldeep/seed2/kicstrter_data/ks-projects-201801.csv")
names(kick_data)
library(ggplot2)
library(dplyr)
ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
library(plotly)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+ggtitle("countries participating in kickstarter",subtitle ="generated by kickstarter data" )+xlab("countries")+ylab("NO. Of Projects")
ggplotly(a)
library(plotly)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")
ggplotly(a)
library(plotly)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels = as)
ggplotly(a)
library(plotly)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels = comma)
library(plotly)
library(scales)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels =comma)
ggplotly(a)
library(plotly)
library(scales)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels =comma)
ggplotly(a)
library(plotly)
library(scales)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels =comma)
ggplotly(a)
library(plotly)
library(scales)
as=c(0:500000)
a=ggplot(data = kick_data,aes(x=country))+geom_bar()+xlab("countries")+ylab("NO. Of Projects")+scale_y_continuous(labels =comma)
ggplotly(a)
ggplot(data=kick_data,aes(x=factor(country),y=usd_goal_real),colour=state)+geom_abline()
ggplot(data=kick_data,aes(x=factor(country),y=usd_goal_real),colour=state)+geom_boxplot()
ggplot(data=kick_data,aes(x=factor(country),y=usd_goal_real,colour=state))+geom_boxplot()+scale_y_continuous(labels = comma)
filt=kick_data%>%filter(country=="US")%>%filter(state=="successfull")%>%filter(usd_goal_real>50000000)
saummarise(filt)
summarise(filt)
View
View(filt)
View(filt)
View(filt)
View(filt)
View(filt)
View(filt)
View(filt)
View(filt)
a=kick_data%>%filter(state="successful",usd_goal_real>50000000)
a=kick_data%>%filter(state=="successful",usd_goal_real>50000000)
View(a)
View(a)
View(a)
ggplot(data=kick_data,aes(x=usd_pledged_real,y=country))+geom_freqpoly()
ggplot(data=kick_data,aes(x=usd_pledged_real,y=country))+geom_freqpoly(bandwidth.kernel(10))
ggplot(data=kick_data,aes(x=usd_pledged_real,y=country))+geom_freqpoly(bandwidth=10
)
ggplot(data=kick_data,aes(x=country,y=usd_pledged_real))+geom_freqpoly(bandwidth=10)
ggplot(data=kick_data,aes(x=usd_pledged_real,y=country))+geom_point()
ggplot(data=kick_data,aes(x=country,y=usd_pledged_real))+geom_dot
ggplot(data=kick_data,aes(x=country,y=usd_pledged_real))+geom_point()
us_data=kick_data%>%filter(country=="US")
ggplot(data=us_data,aes(x=usd_pleadged_real,y=backers)).geom_point()
ggplot(data=us_data,aes(x=usd_pleadged_real,y=backers))+geom_point()
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers))+geom_point()
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers))+geom_point()+scale_x_continuous(labels = comma)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)
ggplot(data=kick_data,aes(x=factor(country),y=usd_goal_real,colour=state))+geom_boxplot()+scale_y_continuous(labels = comma)
ggplot(data=kick_data,aes(x=factor(country),y=usd_goal_real,colour=state))+geom_boxplot()+scale_y_continuous(labels = comma)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(lim_x=c(0,50000))
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = 50000)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,50000))
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000))
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000))+alpha("green")
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000),xlim = c(0,2500000))
table(us_data$state)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point()+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000),xlim = c(0,2500000))+alpha(1/100)
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point(alpha(1/100))+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000),xlim = c(0,2500000))
ggplot(data=us_data,aes(x=usd_pledged_real,y=backers,colour=state))+geom_point(aes(alpha(1/100))+scale_x_continuous(labels = comma)+coord_cartesian(ylim = c(0,10000),xlim = c(0,2500000))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
summarise(mu_sigma=mean(area),pop_1=quantile(area,0.25),pop_3=quantile(area,0,75))
ames%>%summarise(mu_sigma=mean(area),pop_1=quantile(area,0.25),pop_3=quantile(area,0,75))
ames%>%summarise(mu_sigma=mean(area),pop_1=quantile(area,0.25),pop_3=quantile(area,0.75))
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
sample1=ames%>%sample_n(size=50)
sample_mean_50=ames%>%>rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%summarise(sampl_mean=mean(area))
sample_mean_50=ames%>%>rep_sample_n(size = 50, reps = 15000, replace = TRUE)%>%summarise(sampl_mean=mean(area))
sample_mean_50=ames%>%rep_sample_n(size = 50, reps = 15000, replace = TRUE)%>%summarise(sampl_mean=mean(area))
ggplot(data=sample_mean_50,aes(x=sampl_mean))+geom_histogram(binwidth = 20)
max(sample_mean_50$sampl_mean)
mean(sample_mean_50$sampl_mean)
mode(sample_mean_50)
mode(sample_mean_50$sampl_mean)
sample_mean_50%>%
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean))
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=(sample_mean_50))
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=(sampl_mean))
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=(sampl_mean))
sample_mean_50%>%
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=(sampl_mean))
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=max(sampl_mean))
sample_mean_50%>%
summarise(mu=mean(sampl_mean),pop_med=median(sampl_mean),pop_min=min(sampl_mean),sigma=sd(sampl_mean),pop_max=max(sampl_mean))
runApp('/media/kuldeep/seed2/shinyapp/First_shiny')
pnorm(0.81,3,0.246)
pnorm(3.2,3,0.246)
a=pnorm(3.2,3,0.246)
1-a
pt(2,lower.tail = FALSE)*2
pt(2,df=50,lower.tail = FALSE)*2
pt(2,df=10,lower.tail = FALSE)*2
pt
pt(2.3,df=21.lower.tail=FALSE)*2
pt(2.3,df=21,lower.tail=FALSE)*2
pt(2.24,df=21,lower.tail=FALSE)*2
pt(-0.87,df=199,lower.tail=FALSE)*2
pt(0.87,df=199,lower.tail=FALSE)*2
plot(cars)
print("create an new tildy")
a=c(1,2,3,4,4)
b=c(23,32,1,2,12)
print(a+b)
ls()
library(dplyr)
library(ggplot2)
library(statsr)
app=rnorm(100)
app1=rnorm(100)
a=data_frame(app,app1)
ggplot(data = a,aes(x=app,y=app1))+geom_point()+theme_bw()+xlab("randaom")+ylab("random y axis")
pdf("figure.pdf")
ggplot(data=a,aes(x=app,y=app1))+geom_point()
dev.off()
as=seq(1,23,length=10)
as
Auto=read.csv("Auto.csv",na.strings = "?")
fix(Auto)
dim(Auto)
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
library(ggplot2)
plot1=ggplot(data = Auto,aes(x=cylinders,y=mpg))+geom_point()+xlab("No of cylinders")+ylab("Milage")
library(plotly)
ggplotly(plot1)
cor(Auto$mpg,Auto$cylinders)
cylinders=as.factor(cylinders)
Auto$cylinders=as.factor(Auto$cylinders)
ggplot(data="Auto",aes(x=mpg,color=cylinders))+geom_boxplot()
ggplot(data=Auto,aes(x=mpg,colours=cylinders))+boxplot()
ggplot(data=Auto,aes(x=mpg,y=cylinders))+boxplot()
ggplot(data=Auto,aes(x=mpg,y=cylinders))+geom_boxplot()
ggplot(data=Auto,aes(x=mpg,colours=cylinders))+geom_boxplot()
ggplot(data=Auto,aes(x=mpg,y=cylinders))+geom_boxplot()
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_bw()
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_bw("AW")
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_bw(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_bw()
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_bw(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_dark()
base_rect_size = base_size/22)
ggplot(data=Auto,aes(x=cylinders,y=mpg))+geom_boxplot()+theme_gray()
base_rect_size = base_size/22)
pairs(Auto)
pairs(~mpg+hporsepower)
pairs(~mpg+horsepower)
pairs(~mpg+horsepower)
View(Auto)
pairs(~mpg+displacement,horsepower)
pairs(~ mpg + displacement+horsepower)
pairs(~ Auto$mpg + Auto$displacement+Auto$horsepower)
pairs(~ Auto$mpg + Auto$displacement+Auto$horsepower)
plot(Auto$mpg,Auto$displacement)
pairs(~ Auto$mpg + Auto$displacement+Auto$horsepower)
plot(log(Auto$mpg),Auto$displacement)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.3.0", hadoop_version = "2.7")
cvddv
2+2
dwd
dw
q()
q()
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
savehistory()
summary(Auto)dss
summary(Auto)
identify(Auto$mpg,Auto$horsepower,Auto$mpg)
identify(Auto$mpg,Auto$horsepower,Auto$displacement)
savehistory()
